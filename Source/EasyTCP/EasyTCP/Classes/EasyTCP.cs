// auto-generated by EasyConfig (v4.2.17)

using XmlExt;
using System;
using System.Xml;
using System.Collections.Generic;

namespace Config
{
	internal class EasyTCP
	{
		public readonly Version Version;
		public static readonly Version ExpectedVersion = new Version(3, 2);

		public readonly StreamData Stream;
		public readonly List<DataType> DataTypes;

		public EasyTCP(string Filename)
		{
			var Doc = new XmlDocument();
			Doc.Load(Filename);

			var Node = Doc.DocumentElement;

			// Check version
			Version = new Version(Node.Attr("Version"));
			if (Version.Major != ExpectedVersion.Major || Version.Minor < ExpectedVersion.Minor)
				throw new Exception("Version Mismatch");

			var StreamNode = Node.SelectSingleNode("*[local-name()='Stream']");
			if (StreamNode != null)
				Stream = new StreamData(StreamNode);

			DataTypes = new List<DataType>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='DataType']"))
				DataTypes.Add(new DataType(X));
		}

		internal class StreamData
		{
			public readonly string Version;
			public readonly string ClassName;
			public readonly List<PacketData> Packet;

			public StreamData(XmlNode Node)
			{
				Version = Node.Attr("Version");
				ClassName = Node.Attr("ClassName");

				Packet = new List<PacketData>();
				foreach (XmlNode X in Node.SelectNodes("*[local-name()='Packet']"))
					Packet.Add(new PacketData(X));
			}

			internal class PacketData
			{
				public readonly int Code;

				/// <summary>
				/// Used for method, event and delegate names (Must be unique)
				/// </summary>
				public readonly string Name;

				public readonly string Desc;
				public readonly List<DataData> Data;

				public PacketData(XmlNode Node)
				{
					Code = Node.iAttr("Code");
					Name = Node.Attr("Name");
					Desc = Node.Attr("Desc", null);

					Data = new List<DataData>();
					foreach (XmlNode X in Node.SelectNodes("*[local-name()='Data']"))
						Data.Add(new DataData(X));
				}

				internal class DataData
				{
					public readonly string Name;
					public readonly string Type;
					public readonly string Desc;
					public readonly bool isList;

					public DataData(XmlNode Node)
					{
						Name = Node.Attr("Name");
						Type = Node.Attr("Type");
						Desc = Node.Attr("Desc", null);
						isList = Node.ynAttr("isList", false);
					}
				}
			}
		}

		internal class DataType
		{
			public readonly string Name;
			public readonly bool Partial;

			/// <summary>
			/// By default datatype is struct
			/// </summary>
			public readonly bool isClass;

			public readonly List<Field> Fields;

			public DataType(XmlNode Node)
			{
				Name = Node.Attr("Name");
				Partial = Node.ynAttr("Partial", false);
				isClass = Node.ynAttr("isClass", false);

				Fields = new List<Field>();
				foreach (XmlNode X in Node.SelectNodes("*[local-name()='Field']"))
					Fields.Add(new Field(X));
			}

			internal class Field
			{
				public readonly string Name;
				public readonly string Type;
				public readonly bool isList;

				public Field(XmlNode Node)
				{
					Name = Node.Attr("Name");
					Type = Node.Attr("Type");
					isList = Node.ynAttr("isList", false);
				}
			}
		}
	}
}
