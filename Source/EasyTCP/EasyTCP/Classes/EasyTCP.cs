// auto-generated by EasyConfig (v4.7.30)

using XmlExt;
using System;
using System.Xml;
using System.Collections.Generic;

namespace Config
{
	internal class EasyTCP
	{
		public readonly Version Version;
		public static readonly Version ExpectedVersion = new Version(5, 1);

		public readonly List<Enum> Enums;
		public readonly List<DataType> DataTypes;
		public readonly StreamData Stream;

		public EasyTCP(string Filename)
		{
			var Doc = new XmlDocument();
			Doc.Load(Filename);

			var Node = Doc.DocumentElement;

			// Check version
			Version = new Version(Node.Attr("Version"));
			if (Version.Major != ExpectedVersion.Major || Version.Minor < ExpectedVersion.Minor)
				throw new Exception("Version Mismatch");

			Enums = new List<Enum>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Enum']"))
				Enums.Add(new Enum(X));

			DataTypes = new List<DataType>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='DataType']"))
				DataTypes.Add(new DataType(X));

			var StreamNode = Node.SelectSingleNode("*[local-name()='Stream']");
			if (StreamNode != null)
				Stream = new StreamData(StreamNode);
		}

		internal class StreamData
		{
			public readonly string Version;
			public readonly string ClassName;
			public readonly List<PacketData> Packet;

			public StreamData(XmlNode Node)
			{
				Version = Node.Attr("Version");
				ClassName = Node.Attr("ClassName");

				Packet = new List<PacketData>();
				foreach (XmlNode X in Node.SelectNodes("*[local-name()='Packet']"))
					Packet.Add(new PacketData(X));
			}

			internal class PacketData : Base
			{
				public readonly int Code;
				public readonly List<Field> Data;

				public PacketData(XmlNode Node) : base(Node)
				{
					Code = Node.iAttr("Code");

					Data = new List<Field>();
					foreach (XmlNode X in Node.SelectNodes("*[local-name()='Data']"))
						Data.Add(new Field(X));
				}
			}
		}
	}

	internal partial class Base
	{
		public readonly string Name;
		public readonly string Desc;

		public Base(XmlNode Node)
		{
			Name = Node.Attr("Name");
			Desc = Node.Attr("Desc", null);
		}
	}

	internal partial class Field : Base
	{
		public readonly string Type;
		public readonly bool isList;

		public Field(XmlNode Node) : base(Node)
		{
			Type = Node.Attr("Type");
			isList = Node.ynAttr("isList", false);
		}
	}

	internal partial class DataType : Base
	{
		public readonly bool Partial;

		/// <summary>
		/// By default datatype is struct
		/// </summary>
		public readonly bool isClass;

		public readonly List<Field> Fields;

		public DataType(XmlNode Node) : base(Node)
		{
			Partial = Node.ynAttr("Partial", false);
			isClass = Node.ynAttr("isClass", false);

			Fields = new List<Field>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Field']"))
				Fields.Add(new Field(X));
		}
	}

	internal partial class Enum : Base
	{
		public readonly List<EnumMember> Members;

		public Enum(XmlNode Node) : base(Node)
		{
			Members = new List<EnumMember>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Member']"))
				Members.Add(new EnumMember(X));
		}
	}

	internal partial class EnumMember : Base
	{
		public readonly int? Value;

		public EnumMember(XmlNode Node) : base(Node)
		{
			Node.Attr("Value", out Value, null);
		}
	}
}
