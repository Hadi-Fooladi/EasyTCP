// auto-generated by EasyTCP (v6.0.22)

using System;
using System.IO;
using System.Threading;
using System.Collections.Generic;

namespace EasyTCP
{
	internal class MyStream : BaseStream
	{
		private static readonly Version VERSION = new Version("2.0");

		public MyStream(int WriteBufferLength = 65536) : base(WriteBufferLength)
		{
			T = new Thread(ReceiveData) { IsBackground = true };
		}

		#region Overridden
		protected override Thread T { get; }
		protected override Version Version { get { return VERSION; } }
		#endregion

		#region Delegates
		public delegate void dlgInfo(MyStream Sender, string Name);
		public delegate void dlgMessage(MyStream Sender, string Message);
		public delegate void dlgPicture(MyStream Sender, ByteArray Data);
		#endregion

		#region Events
		public event dlgInfo OnInfo;
		public event dlgMessage OnMessage;
		public event dlgPicture OnPicture;
		#endregion

		#region Send Methods
		public void SendInfo(string Name)
		{
			if (Closing) return;

			lock (WriteLock)
			{
				WriteCode(0);
				BW.Write(Name);
				Flush();
			}
		}

		public void SendMessage(string Message)
		{
			if (Closing) return;

			lock (WriteLock)
			{
				WriteCode(1);
				BW.Write(Message);
				Flush();
			}
		}

		public void SendPicture(ByteArray Data)
		{
			if (Closing) return;

			lock (WriteLock)
			{
				WriteCode(2);
				BW.Write(Data);
				Flush();
			}
		}
		#endregion

		private void ReceiveData()
		{
			try
			{
				for (;;)
				{
					ushort Code = BR.ReadUInt16();
					int Len = BR.ReadInt32();

					switch (Code)
					{
					case 0xFFFF:
						SendCloseRequest();

						Client.Close();
						fireClosed();
						return; // Exit the thread

					case 0: // Info
					{
						string oName;

						BR.Read(out oName);

						OnInfo?.Invoke(this, oName);
						break;
					}

					case 1: // Message
					{
						string oMessage;

						BR.Read(out oMessage);

						OnMessage?.Invoke(this, oMessage);
						break;
					}

					case 2: // Picture
					{
						ByteArray oData;

						BR.Read(out oData);

						OnPicture?.Invoke(this, oData);
						break;
					}

					default:
						BR.ReadBytes(Len); // Skip Packet
						break;
					}
				}
			}
			catch (Exception E)
			{
				fireException(E);
			}
		}
	}
}
